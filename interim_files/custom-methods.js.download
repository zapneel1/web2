/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template ormile, choose Tools | Templates
 * and open the template in the editor.
 */


var positionX = "", positionY = "", modal_positionY = "";

//var scroll;
//$(window).scroll(function (event) {
//    scroll = $(document).scrollTop().valueOf();
//    // Do something
//});
$(document).on("mousemove", ".btn", function (e) {

    modal_positionY = $(this).offset().top;
    //alert(inIframe());
    //modal_positionY = $(this).top;
});


$(function () {
//    $(".popover-title").css({"background-color": "#31b0d5", "color": "#FFFFFF"});
//    $(".popover-content").css({"background-color": "#fff7d7", "color": "#000000"});
//    .popover-title {
//        background-color: #31b0d5; 
//        color: #FFFFFF; 
//
//        text-align:center;
//    }
//    /* Popover Body */
//    .popover-content {
//        background-color: #fff7d7;
//        color: #000000;
//    }
});

function inIframe() {
    try {
        return window.self !== window.top;
    } catch (e) {
        return true;
    }
//    if (window.frameElement) {
//        return true;
//    } else {
//        return false;
//    }
}
/**
 * 
 * @param {type} id
 * @param {type} url
 * @param {type} parameters is key value array
 * @param {type} hasAll
 * @returns {void}
 */
function createSelectPickerAndLoad(target_div, label, id, name, url, parameters, hasAll, action) {
    var layout = '<div class="col-lg-3 col-md-4 col-sm-6 col-xs-12 form-group"><label for="' + id + '">' + label + '</label><select id="' + id + '" name="' + name + '" class="selectpicker form-control" data-size="5" data-live-search="true" ></select></div>';
    if ($("#" + id).length === 0) {
        $("#" + target_div).append(layout);
        if (action === "LOAD") {
            updateSelectPicker("#" + id, url, parameters, hasAll);
        }
    }
}

function date_pickerActivate(id) {
    $(id).datepicker({
        format: 'dd-mm-yyyy',
        //startDate: '20-07-2016',
        autoclose: true
    });
}

function  updateSelectPicker(id, url, parameters, hasAll) {
    //alert(id + url + hasAll);
    $(id).empty();
    $(id).selectpicker('refresh');
    var complete_link = createlink(url, parameters);
    $.ajax({
        url: complete_link,
        type: "POST",
        cache: false,
        dataType: "json",
        beforeSend: function () {
            $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
        },
        success: function (json) {
            $("#overlay").remove();
            var html_formation = "";
            if (json === null) {
                myalert("SERVER NOT RESPONDING ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
            } else {
                var column_name = [];
                for (var key in json[0]) {
                    column_name.push(key.toString());
                }

                if (hasAll === "ALL") {
                    //$(id).append($('<option></option>').val("").html("--SELECT OPTION--"));
                    //$(id).append($('<option></option>').val("ALL").html("ALL"));
                    html_formation = html_formation + "<option value=''>----SELECT OPTION----</option>"
                    html_formation = html_formation + "<option value='ALL'>ALL</option>"
                } else if (hasAll === "NEW") {
                    //$(id).append($('<option></option>').val("").html("--SELECT OPTION--"));
                    // $(id).append($('<option></option>').val("NEW").html("---Create New---"));
                    html_formation = html_formation + "<option value=''>----SELECT OPTION----</option>"
                    html_formation = html_formation + "<option value='NEW'>---Create New---</option>"
                } else if (hasAll === "BLANK") {

                } else {
                    //$(id).append($('<option></option>').val("").html("--SELECT OPTION--"));
                    html_formation = html_formation + "<option value=''>----SELECT OPTION----</option>"
                }
                for (i = 0; i < json.length; i++) {
                    //alert(JSON.stringify(json[i]));
                    //$(id).append($('<option></option>').val(json[i][column_name[0]]).html(json[i][column_name[1]]));
                    if (column_name.length > 1) {
                        html_formation = html_formation + "<option value='" + json[i][column_name[0]] + "'>" + json[i][column_name[1]] + "</option>";
                    } else {
                        html_formation = html_formation + "<option value='" + json[i][column_name[0]] + "'>" + json[i][column_name[0]] + "</option>";
                    }
                }

                $(id).html(html_formation);
                $(id).selectpicker('refresh');
            }
        }
    });
}

function  updateSelectPickerFromJson(id, json, hasAll) {
    var html_formation = "";
    var column_name = [];
    for (var key in json[0]) {
        column_name.push(key.toString());
    }

    if (hasAll === "ALL") {
        //$(id).append($('<option></option>').val("").html("--SELECT OPTION--"));
        //$(id).append($('<option></option>').val("ALL").html("ALL"));
        html_formation = html_formation + "<option value=''>----SELECT OPTION----</option>"
        html_formation = html_formation + "<option value='ALL'>ALL</option>"
    } else if (hasAll === "NEW") {
        //$(id).append($('<option></option>').val("").html("--SELECT OPTION--"));
        // $(id).append($('<option></option>').val("NEW").html("---Create New---"));
        html_formation = html_formation + "<option value=''>----SELECT OPTION----</option>"
        html_formation = html_formation + "<option value='NEW'>---Create New---</option>"
    } else if (hasAll === "BLANK") {

    } else {
        //$(id).append($('<option></option>').val("").html("--SELECT OPTION--"));
        html_formation = html_formation + "<option value='0'>----SELECT----</option>"
    }
    for (i = 0; i < json.length; i++) {
        //alert(JSON.stringify(json[i]));
        //$(id).append($('<option></option>').val(json[i][column_name[0]]).html(json[i][column_name[1]]));
        if (column_name.length > 1) {
            html_formation = html_formation + "<option value='" + json[i][column_name[0]] + "'>" + json[i][column_name[1]] + "</option>";
        } else {
            html_formation = html_formation + "<option value='" + json[i][column_name[0]] + "'>" + json[i][column_name[0]] + "</option>";
        }
    }

    $(id).html(html_formation);
    $(id).selectpicker('refresh');
}
/**
 * 
 * @param {type} url
 * @param {type} parameters, it is array
 * @returns {void}
 */
function createlink(url, parameters) {
    var param = "";
    if (parameters.length > 0) {
        for (i = 0; i < parameters.length; i++) {
            var temp = encodeURIComponent(encodeURIComponent(parameters[i].split("-")));
            if (i == 0) {
                param = param + "?" + temp[0] + "=" + temp[1]
            } else {
                param = param + "&" + temp[0] + "=" + temp[1]

            }
        }
    }
    return (url + param);
}

/**
 * 
 * @param {type} ajaxURL
 * @param {type} header
 * @param {type} body
 * @param {type} footer
 * @param {type} method POST / GET
 * @param {type} functionNeedToCall  the method you want to cal, the method it self pass the json..
 * @returns {json}
 */
function AjaxCallForIndividualMyDialogue(ajaxURL, header, body, footer, method, functionNeedToCall) {
    //alert(ajaxURL);
    var dialog = new BootstrapDialog({
        title: '<h3>' + header + '</h3>',
        //type: BootstrapDialog.TYPE_WARNING,
        message: '<h3>' + body + '</h3>',
        buttons: [
            {
                id: 'Yes',
                label: 'YES',
                cssClass: 'btn-success',
                action: function (dialogItself) { //if click YES then save the data
                    $(this).addClass('hidden');
                    dialogItself.close();
                    var x = $.ajax({
                        type: method,
                        url: ajaxURL,
                        async: false,
                        beforeSend: function () {
                            $(".modal").modal('hide');
                            $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
                        },
                        success: function (json) {
                            $("#overlay").remove();
                            functionNeedToCall(json);
                        },
                        error: function (xhr, status, error) {
                            $(".modal").modal('hide');
                            $("#overlay").remove();
                            if (status === "error") {
                                myalert("UNWANTED ERROR!", "Error Message:" + error);
                            }
                            functionNeedToCall();
                        }
                    });
                }
            },
            {
                id: 'NO',
                label: 'NO',
                cssClass: 'btn-danger',
                action: function (dialogItself) {
                    dialogItself.close();
                    var obj = {'action': "NO_ACTION"};
                    functionNeedToCall(obj);
                }
            }
        ]
    });
    dialog.realize();
    //dialog.getModalHeader().hide();
    //dialog.getModalFooter().hide();
    dialog.setSize(BootstrapDialog.SIZE_LARGE);
    //dialog.getModalBody().css('background-color', 'white');
    //dialog.getModalBody().css('color', 'blue');
    //dialog.getModalFooter().css('background-color', 'green');
    dialog.open();
    if (inIframe() === "true" || inIframe()) {
        dialog.getModalDialog().css({top: modal_positionY - 250, position: "stiky"});
    }
}
function AjaxCallForIndividualMyDialogueUnaffectingModal(ajaxURL, header, body, footer, method, functionNeedToCall) {
    //alert(ajaxURL);
    var dialog = new BootstrapDialog({
        title: '<h3>' + header + '</h3>',
        //type: BootstrapDialog.TYPE_WARNING,
        message: '<h3>' + body + '</h3>',
        buttons: [
            {
                id: 'Yes',
                label: 'YES',
                cssClass: 'btn-success',
                action: function (dialogItself) { //if click YES then save the data
                    dialogItself.close();
                    var x = $.ajax({
                        type: method,
                        url: ajaxURL,
                        async: false,
                        beforeSend: function () {
                            //$(".modal").modal('hide');
                            $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
                        },
                        success: function (json) {
                            $("#overlay").remove();
                            functionNeedToCall(json);
                        },
                        error: function (xhr, status, error) {
                            //$(".modal").modal('hide');
                            $("#overlay").remove();
                            if (status === "error") {
                                myalert("UNWANTED ERROR!", "Error Message:" + error);
                            }
                            functionNeedToCall();
                        }
                    });
                }
            },
            {
                id: 'NO',
                label: 'NO',
                cssClass: 'btn-danger',
                action: function (dialogItself) {
                    dialogItself.close();
                }
            }
        ]
    });
    dialog.realize();
    //dialog.getModalHeader().hide();
    //dialog.getModalFooter().hide();
    dialog.setSize(BootstrapDialog.SIZE_LARGE);
    //dialog.getModalBody().css('background-color', 'white');
    //dialog.getModalBody().css('color', 'blue');
    //dialog.getModalFooter().css('background-color', 'green');
    dialog.open();
    if (inIframe() === "true" || inIframe()) {
        dialog.getModalDialog().css({top: modal_positionY - 250, position: "stiky"});
    }
}

function AjaxCallForIndividualMyDialogueWithForm(URL, header, body, footer, method, functionNeedToCall, form_id) {
//    alert(URL+form_id);
    var dialog = new BootstrapDialog({
        title: '<h3>' + header + '</h3>',
        //type: BootstrapDialog.TYPE_WARNING,
        message: '<h3>' + body + '</h3>',
        buttons: [
            {
                id: 'Yes',
                label: 'YES',
                cssClass: 'btn-success',
                action: function (dialogItself) { //if click YES then save the data
                    $(this).addClass('hidden');
                    dialogItself.close();
                    var x = $.ajax({
                        type: method,
                        url: URL,
                        async: false,
                        data: $(form_id).serialize(),
                        cache: false,
                        dataType: "json",
                        beforeSend: function () {
                            $(".modal").modal('hide');
                            $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
                        },
                        success: function (json) {
                            $("#overlay").remove();
                            functionNeedToCall(json);
                        },
                        error: function (xhr, status, error) {
                            $(".modal").modal('hide');
                            $("#overlay").remove();
                            if (status === "error") {
                                myalert("UNWANTED ERROR!", "Error Message:" + error);
                            }
                            functionNeedToCall();
                        }
                    });
                }
            },
            {
                id: 'NO',
                label: 'NO',
                cssClass: 'btn-danger',
                action: function (dialogItself) {
                    dialogItself.close();
                }
            }
        ]
    });
    dialog.realize();
    //dialog.getModalHeader().hide();
    //dialog.getModalFooter().hide();
    dialog.setSize(BootstrapDialog.SIZE_LARGE);
    //dialog.getModalBody().css('background-color', 'white');
    //dialog.getModalBody().css('color', 'blue');
    //dialog.getModalFooter().css('background-color', 'green');
    dialog.open();
    if (inIframe() === "true" || inIframe()) {

        dialog.getModalDialog().css({top: modal_positionY - 250, position: "stiky"});
    }
}

function getJsonValueFromAjaxCallUnaffectingModal(target_url) {
    var value = "";
    var x = $.ajax({
        type: "post",
        url: target_url,
        async: false,
        beforeSend: function () {
            //$(".modal").modal('hide');
            $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
        },
        success: function (json) {
            //$(".modal").modal('hide');
            $("#overlay").remove();
            value = json;
        },
        error: function (xhr, status, error) {
            //$(".modal").modal('hide');
            $("#overlay").remove();
            if (status === "error") {
                myalert("UNWANTED ERROR!", "Error Message:" + error);
            }
        }
    });
    return value;
}

/**
 * 
 * @param {type} id
 * @param {type} data_placement
 * @param {type} title
 * @param {type} data_trigger
 * @param {type} data_content
 * @returns {undefined}
 */
function CustomPopOver(id, data_placement, title, data_trigger, data_content) {
//    alert("ok" + id)
    //data-placement='top' title='INFORMATION--wor' data-trigger='hover' data-content='Worked'
    $(id).attr("data-placement", data_placement);
    $(id).attr("title", title);
    $(id).attr("data-trigger", data_trigger);
    $(id).attr("data-content", data_content);
    $(".popover-title").css("background-color", "#31b0d5");
    $(".popover-title").css("color", "#FFFFFF");
    $(".popover-title").css("text-align", "center");
    $(".popover-content").css("background-color", "#fff7d7");
    $(".popover-content").css("color", "#000000");
    $(id).popover({
        html: true,
        content: function () {
            return $('#popover-content').html();
        }
    });


    /*
     $(id).popover();
     * $(id).popover({
     html: true,
     content: function() {
     return $('#popover-content').html();
     }
     });
     */
}
/**
 * 
 * @param {type} badget_class
 * @param {type} glyphycon_item
 * @param {type} description
 * @returns {undefined}
 */
function getDataContentPopOver(badget_class, glyphycon_item, description) {
    var string_format = "<span class='badge alert-" + badget_class + "'><i class='glyphicon glyphicon-" + glyphycon_item + "'></i></span> :" + description + "<br><br>";
    return string_format;
}
function getJsonValueFromAjaxCall(target_url)
{//alert('here');
    var value = "";
    var x = $.ajax({
        type: "post",
        url: target_url,
        async: false,
        beforeSend: function () {
            $(".modal").modal('hide');
            $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
        },
        success: function (json) {
            $(".modal").modal('hide');
            $("#overlay").remove();
            value = json;
        },
        error: function (xhr, status, error) {
            $(".modal").modal('hide');
            $("#overlay").remove();
            if (status === "error") {
                myalert("UNWANTED ERROR!", "Error Message:" + error);
            }
        }
    });
    return value;
}

/**
 * 
 * @param {type} formid
 * @param {type} header
 * @param {type} body
 * @param {type} footer
 * @param {type} type_of_submit, it is eithr NON_AJAX_FORM_SUBMIT or AJAX_FORM_SUBMIT
 * @param {type} functionNeedToCall
 * @returns {void}
 */
function formSubmitMyDialogue(formid, header, body, footer, type_of_submit, functionNeedToCall) {
    //alert('ddd');
    var dialog = new BootstrapDialog({
        title: '<h3>' + header + '</h3>',
        //type: BootstrapDialog.TYPE_WARNING,
        message: '<h3>' + body + '</h3>',
        buttons: [
            {
                id: 'Yes',
                label: 'YES',
                cssClass: 'btn-success',
                action: function (dialogItself) { //if click YES then save the data
                    $(this).addClass('hidden');
                    dialogItself.close();
                    if (type_of_submit === "NON_AJAX_FORM_SUBMIT") {
                        $(formid).submit();
                    } else {
                        //   submitForm(formid, functionNeedToCall);
                        if (formid == '#ioe_form')

                        {
                            submitForm_div(formid, functionNeedToCall);
                        } else {
                            submitForm(formid, functionNeedToCall);
                        }

                    }
                }
            },
            {
                id: 'NO',
                label: 'NO',
                cssClass: 'btn-danger',
                action: function (dialogItself) {
                    dialogItself.close();
                    var obj = {'action': "NO_ACTION"};
                    functionNeedToCall(obj);
                }
            }
        ]
    });
    dialog.realize();
    //dialog.getModalHeader().hide();
    //dialog.getModalFooter().hide();
    //dialog.setSize(BootstrapDialog.SIZE_LARGE);
    //dialog.getModalBody().css('background-color', 'white');
    //dialog.getModalBody().css('color', 'blue');
    //dialog.getModalFooter().css('background-color', 'green');
    dialog.open();
    if (inIframe() === "true" || inIframe()) {
        dialog.getModalDialog().css({top: modal_positionY - 250, position: "stiky"});
    }
}

/**
 * 
 * @param {type} id
 * @param {type} header
 * @param {type} body
 * @param {type} footer
 * @param {type} type_of_submit
 * @param {type} functionNeedToCall
 * @returns {Boolean}
 */
function formValidation(id, header, body, footer, type_of_submit, functionNeedToCall) {

    var status;
    var hid_file_chk;
    $(id + ' input[type=text], ' + id + ' select, ' + id + ' textarea, ' + id + ' input[type=hidden], ' + id + ' input[type=file]').each(
            function (index) {

                var input = $(this);
                var namev = (input.attr('name'));
//                   var namer =(input.attr('name')); 
               // alert('Type:   ' + input.attr('type') + ' Name:   ' + input.attr('name') + ' Value:   ' + input.val() + ' id:   ' + input.attr('id') + ' hid_file_chk:    ' + hid_file_chk);
                //  if (input.attr('custom_required') === "true") {
                if ((input.val() === null || input.val() === "0") && (input.attr('type') !== "text") && (input.attr('mytype') !== "textArea") && (input.attr('type') !== "hidden") && (input.attr('type') !== "file")) {
                    // alert("111");
                    //alert($('label[for="' + input.attr('id') + '"]').text());

                    myalert("EMPTY SELECTION", "Please Choose An Option From:&nbsp&nbsp<font color='red'><b><u>" + namev.substring(1,namev.length-1)  +" in row no "+ (parseInt(namev.substring(namev.length-1,namev.length ))+1)+"  </u></b></font>" );
                    // document.getElementById('but_val_id_1').value = 'S'
                    status = false;
                    return false;
                } else if (input.val().toString().trim() === "" && (input.attr('type') === "text" || input.attr('mytype') === "textArea") && (input.attr('type') !== "hidden") && (input.attr('type') !== "file") && input.attr('class') !== "input-block-level form-control") {
                    //  alert("222");
                    myalert("EMPTY FIELD NOT ALLOWED", "Please Fillup <font color='red'><b><u>" + namev.substring(0,namev.length-1)  +" in row no "+ (parseInt(namev.substring(namev.length-1,namev.length ))+1)+"  </u></b></font>" );
                    //document.getElementById('but_val_id_1').value = 'S'
                    status = false;
                    return false;
                } else if (input.val().toString().trim() === "" && (input.attr('type') == "hidden") && input.attr('name').substring(0, 7) == "hidfile") {
                  //  alert("333");

                    hid_file_chk = "NO_FILE";

                } else if (input.val().toString().trim() === "" && (input.attr('type') == "file") && hid_file_chk == "NO_FILE") {
                  //  alert("444");
                    myalert("FILE NOT UPLOADED", "Please Upload <font color='red'><b><u>" + namev.substring(0,namev.length-1)  +" in row no "+ (parseInt(namev.substring(namev.length-1,namev.length ))+1)+"  </u></b></font>" );
                    //  document.getElementById('but_val_id_1').value = 'S'
                    hid_file_chk = null;
                    status = false;
                    return false;
                } else {// alert("555");
                    status = true;
                }
//                } else {
//                    status = true;
//                }
            }
    );
//    $(id + ' input[type=text], ' + id + ' select, ' + id + ' textarea').each(
//            function (index) {
//
//                var input = $(this);
//                   var namev =(input.attr('name'));  
//                   var namer =(input.attr('name'));  
//                 //  alert(namev.substring(0,namev.length-1));
//                if (input.attr('custom_required') === "true") {
//                    if ((input.val() === null || input.val() === "") && (input.attr('type') !== "text") && (input.attr('mytype') !== "textArea")) {
//                        //alert($('label[for="'+ input.attr('id') +'"]').text());
//                        myalert("EMPTY SELECTION", "Please Choose An Option From:&nbsp&nbsp<font color='red'><b><u>" + $('label[for="' + input.attr('id') + '"]').text() + "</u></b></font>", "#" + input.attr('id'));
//                        status = false;
//                        return false;
//                    } else if (input.val().toString().trim() === "" && (input.attr('type') === "text" || input.attr('mytype') === "textArea") && input.attr('class') !== "input-block-level form-control") {
//                        myalert("EMPTY FIELD NOT ALLOWED", "Please Fillup the Field <font color='red'><b><u>" + namev.substring(0,namev.length-1)  +" in row no "+ (parseInt(namev.substring(namev.length-1,namev.length ))+1)+"  </u></b></font>" );
//                        status = false;
//                        return false;
//                    } else {
//                        status = true;
//                    }
//                } else {
//                    status = true;
//                }
//                
//           }
//    );
    if (status) {
        formSubmitMyDialogue(id, header, body, footer, type_of_submit, functionNeedToCall);
    } else {
        return false;
    }
}


function formValidation_div(id, header, body, footer, type_of_submit, functionNeedToCall) {

    var status;
    var hid_file_chk;
    
    // $(id + 'input[type=text], ' + id + ' select, ' + id + ' textarea, ' + id + 'input[type=file]' + id).each(
    $(id + ' input[type=text], ' + id + ' select, ' + id + ' textarea, ' + id + ' input[type=hidden], ' + id + ' input[type=file]').each(
            function (index) {
 

                var input = $(this);
 //alert(" id "+id + "  ::"+input.val()+" .. "+input.attr('id'));
                   alert('Type:   ' + input.attr('type') + ' Name:   ' + input.attr('name')  + ' Value:   ' + input.val() + ' id:   ' + input.attr('id')+' hid_file_chk:    '+hid_file_chk);
                //  if (input.attr('custom_required') === "true") {
                if ((input.val() === null || input.val() === "") && (input.attr('type') !== "text") && (input.attr('mytype') !== "textArea") && (input.attr('type') !== "hidden") && (input.attr('type') !== "file")) {
                    //  alert("111");
                    alert($('label[for="' + input.attr('id') + '"]').text());

                    myalert("EMPTY SELECTION", "Please Choose An Option From:&nbsp&nbsp<font color='red'><b><u>" + $('label[for="' + input.attr('id') + '"]').text() + "</u></b></font>", "#" + input.attr('id'));
                    document.getElementById('but_val_id_1').value = 'S'
                    status = false;
                    return false;
                } else if (input.val().toString().trim() === "" && (input.attr('type') === "text" || input.attr('mytype') === "textArea") && (input.attr('type') !== "hidden") && (input.attr('type') !== "file") && input.attr('class') !== "input-block-level form-control") {
                    //alert("222");
                    myalert("EMPTY FIELD NOT ALLOWED", "Please Fillup <font color='red'><b><u>" + $('label[for="' + input.attr('id') + '"]').text() + "</u></b></font>", "#" + input.attr('id'));
                    document.getElementById('but_val_id_1').value = 'S'
                    status = false;
                    return false;
                } else if (input.val().toString().trim() === "NO_FILE" && (input.attr('type') == "text") && input.attr('name').substring(0, 7) == "hidfile") {
                    //alert("333");

                    hid_file_chk = "NO_FILE";

                } else if (input.val().toString().trim() === "" && (input.attr('type') == "file") && hid_file_chk == "NO_FILE") {
                    //   alert("444");
                    myalert("FILE NOT UPLOADED", "Please Upload <font color='red'><b><u>" + $('label[for="' + input.attr('id') + '"]').text() + "</u></b></font>", "#" + input.attr('id'));
                    document.getElementById('but_val_id_1').value = 'S'
                    hid_file_chk = null;
                    status = false;
                    return false;
                } else {// alert("555");
                    status = true;
                }
//                } else {
//                    status = true;
//                }
            }
    );
    if (status) {
        formSubmitMyDialogue(id, header, body, footer, type_of_submit, functionNeedToCall);
    } else {
        return false;
    }
}


/**
 * 
 * @param {type} formid
 * @param {type} functionNeedToCall
 * @returns {String|json}
 */
function submitForm(formid, functionNeedToCall) {
    //customEncodeURI(formid, 2);
    var target_url = $(formid).attr("action");
    var mime = "";
    var contentType_custom = "";
    var processData_custom = "";
    //var formData = "";
    //var formData = new FormData();
    //formData.append('file', $(formid+' input[type=file]')[0].files[0]);
    //var formData = new FormData($(this)[0]);
    // alert("kk---");

    var found = "N";
    $(formid + ' input[type=file]').each(
            function (index) {
                found = "Y";
            }
    );
    found = "Y";
    // alert("formid"+formid);
   // if (formid === "#Submitform1" || formid === "#submit1") // submit1 is used in processtable
    if (formid === "#Submitform1" || formid === "#submit1_json"  )
    { // alert("formid111"+formid);
        found = "N";
    }
    if (found === "Y") {
        // alert("here");
        //myalert("file found","Y");
        //mime = "multipart/form-data";
        var formData = new FormData($(formid)[0]);
        //contentType_custom = false;
        //processData_custom = false;
        var x = $.ajax({
            type: "post",
            url: target_url,
            async: false,
            data: formData,
            cache: false,
            mimeType: mime,
            contentType: false,
            dataType: "json",
            processData: false,
            beforeSend: function () {
                $(".modal").modal('hide');
                $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
            },
            success: function (json) {
                alertBox("Message", '  ' + json.msg);
                //myalert(JSON.stringify(json));
                //alert("mime" + mime + "--formData" + formData + "--contentType_custom" + contentType_custom + "--processData_custom" + processData_custom);
//                    setTimeout(function () {
//                        $(".modal").modal('hide');
//                        if (json === null) {
//                            $("#overlay").remove();
//                            myalert("SERVER NOT RESPONDING ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
//                        } else if (json.status === "N") {
//                            $("#overlay").remove();
//                            myalert("DATA NOT SAVED ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
//                        } else if (json.status === "Y") {
//                            $("#overlay").remove();
//                            myalert("INFORMATION", "Operation Successfully Done.");
//                        } else if (!jQuery.isEmptyObject(json.msg) ) {
//                            $("#overlay").remove();
//                            myalert("INFORMATION", json.msg);
//                        } else if (!jQuery.isEmptyObject(json.data)) {
//                            $("#overlay").remove();
//                            //myalert("INFORMATION", json.msg);
//                        } else {
//                            $("#overlay").remove();
//                            myalert("Technical Error!", "Operation Not Done Successfully.");
//                        }
//                    }, 1000);
                openTab();
                $("#overlay").remove();
                functionNeedToCall(json);
            },
            error: function (xhr, status, error) {
                $(".modal").modal('hide');
                $("#overlay").remove();
                if (status === "error") {
                    myalert("UNWANTED ERROR!", "Error Message:" + error);
                }
                functionNeedToCall();
            }
        });
    } else {
        //  alert("here111");
        //mime = "application/json";
        //myalert("file found","N");
        formData = $(formid).serialize();
        console.log(formData);
        // contentType_custom = false;
        //processData_custom = false;
        var x = $.ajax({
            type: "post",
            url: target_url,
            async: false,
            data: formData,
            cache: false,
            dataType: "json",
            beforeSend: function () {
                $(".modal").modal('hide');
                $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
            },
            success: function (json) {
                alertBox("Message", '' + json.msg);
                //alert("mime" + mime + "--formData" + formData + "--contentType_custom" + contentType_custom + "--processData_custom" + processData_custom);
//                    setTimeout(function () {
//                        $(".modal").modal('hide');
//                        if (json === null) {
//                            $("#overlay").remove();
//                            myalert("SERVER NOT RESPONDING ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
//                        } else if (json.status === "N") {
//                            $("#overlay").remove();
//                            myalert("DATA NOT SAVED ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
//                        } else if (json.status === "Y") {
//                            $("#overlay").remove();
//                            myalert("INFORMATION", "Operation Successfully Done.");
//                        } else if (json.msg !== null) {
//                            $("#overlay").remove();
//                            if (json.msg !== "") {
//                                myalert("INFORMATION", json.msg);
//                            }
//                        } else if (json.data !== null || json.data !== "") {
//                            $("#overlay").remove();
//                            myalert("INFORMATIONeeee", json.msg);
//                        } else {
//                            $("#overlay").remove();
//                            myalert("Technical Error!", "Operation Not Done Successfully.");
//                        }
//                    }, 1000);
                openTab();
                $("#overlay").remove();
                functionNeedToCall(json);
            },
            error: function (xhr, status, error) {
                $(".modal").modal('hide');
                $("#overlay").remove();
                if (status === "error") {
                    myalert("UNWANTED ERROR!", "Error Message:" + error);
                }
                functionNeedToCall();
            }
        });
    }

}


function submitForm_div(formid, functionNeedToCall) {
    //customEncodeURI(formid, 2);
    var target_url = 'processioe.htm';
    var mime = "";
    var contentType_custom = "";
    var processData_custom = "";
    //var formData = "";
    //var formData = new FormData();
    //formData.append('file', $(formid+' input[type=file]')[0].files[0]);
    //var formData = new FormData($(this)[0]);
 //   alert("kk---");
    var found = "N";
    $(formid + ' input[type=file]').each(
            function (index) {
                found = "Y";
            }
    );
    if (found === "Y") {
        //myalert("file found","Y");
        //mime = "multipart/form-data";
        var formData = new FormData($(formid)[0]);
        //contentType_custom = false;
        //processData_custom = false;
        var x = $.ajax({
            type: "post",
            url: target_url,
            async: false,
            data: formData,
            cache: false,
            mimeType: mime,
            contentType: false,
            dataType: "json",
            processData: false,
            beforeSend: function () {
                $(".modal").modal('hide');
                $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
            },
            success: function (json) {
                alertBox("Message ", ' ' + json.msg);
                //myalert(JSON.stringify(json));
                //alert("mime" + mime + "--formData" + formData + "--contentType_custom" + contentType_custom + "--processData_custom" + processData_custom);
//                    setTimeout(function () {
//                        $(".modal").modal('hide');
//                        if (json === null) {
//                            $("#overlay").remove();
//                            myalert("SERVER NOT RESPONDING ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
//                        } else if (json.status === "N") {
//                            $("#overlay").remove();
//                            myalert("DATA NOT SAVED ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
//                        } else if (json.status === "Y") {
//                            $("#overlay").remove();
//                            myalert("INFORMATION", "Operation Successfully Done.");
//                        } else if (!jQuery.isEmptyObject(json.msg) ) {
//                            $("#overlay").remove();
//                            myalert("INFORMATION", json.msg);
//                        } else if (!jQuery.isEmptyObject(json.data)) {
//                            $("#overlay").remove();
//                            //myalert("INFORMATION", json.msg);
//                        } else {
//                            $("#overlay").remove();
//                            myalert("Technical Error!", "Operation Not Done Successfully.");
//                        }
//                    }, 1000);
                openTab();
                $("#overlay").remove();
                functionNeedToCall(json);
            },
            error: function (xhr, status, error) {
                $(".modal").modal('hide');
                $("#overlay").remove();
                if (status === "error") {
                    myalert("UNWANTED ERROR!", "Error Message:" + error);
                }
                functionNeedToCall();
            }
        });
    } else {
        //mime = "application/json";
        //myalert("file found","N");
        formData = $(formid).serialize();
        console.log(formData);
        // contentType_custom = false;
        //processData_custom = false;
        var x = $.ajax({
            type: "post",
            url: target_url,
            async: false,
            data: formData,
            cache: false,
            dataType: "json",
            beforeSend: function () {
                $(".modal").modal('hide');
                $("body").append("<div id='overlay' style='position:absolute;top:0;left:0;height:200%;width:100%;z-index:999'><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><center><img src='pics/ajax-loader.gif' alt='Processing...' height='150' width='150'/></center></div>");
            },
            success: function (json) {
                alertBox("Alert", 'Message: ' + json.msg);
                //alert("mime" + mime + "--formData" + formData + "--contentType_custom" + contentType_custom + "--processData_custom" + processData_custom);
//                    setTimeout(function () {
//                        $(".modal").modal('hide');
//                        if (json === null) {
//                            $("#overlay").remove();
//                            myalert("SERVER NOT RESPONDING ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
//                        } else if (json.status === "N") {
//                            $("#overlay").remove();
//                            myalert("DATA NOT SAVED ERROR", "Please Try After Some Time. If The Same Problem Happens Again Then Please Contact To ERP Administrator.");
//                        } else if (json.status === "Y") {
//                            $("#overlay").remove();
//                            myalert("INFORMATION", "Operation Successfully Done.");
//                        } else if (json.msg !== null) {
//                            $("#overlay").remove();
//                            if (json.msg !== "") {
//                                myalert("INFORMATION", json.msg);
//                            }
//                        } else if (json.data !== null || json.data !== "") {
//                            $("#overlay").remove();
//                            myalert("INFORMATIONeeee", json.msg);
//                        } else {
//                            $("#overlay").remove();
//                            myalert("Technical Error!", "Operation Not Done Successfully.");
//                        }
//                    }, 1000);
                openTab();
                $("#overlay").remove();
                functionNeedToCall(json);
            },
            error: function (xhr, status, error) {
                $(".modal").modal('hide');
                $("#overlay").remove();
                if (status === "error") {
                    myalert("UNWANTED ERROR!", "Error Message:" + error);
                }
                functionNeedToCall();
            }
        });
    }

}

function customEncodeURI(form_id, encodeTimes) {
    var $inputs = $(form_id + ' :input');

    $inputs.each(function (index)
    {
        // For debugging purposes...
        var id = $(this).attr('id');
        testDataPopulate(form_id, id);
        var value = $(form_id + " #" + id).val();
        if (encodeTimes === 2) {
            value = encodeURIComponent(encodeURIComponent(value));
        }
        $(form_id + " #" + id).val(value);
    });
}

function testDataPopulate(form_id, id) {
    if (id === "purpose") {
        var jsonarray = [];

        var value = $(form_id + " #" + id).val();
        var split_segmnet = value.split("SPLIT");
        for (var i = 0; i < split_segmnet.length; i++) {
            var item = {};
            item ["actual_value"] = split_segmnet[i];
            item ["single_URL_encode"] = encodeURIComponent(split_segmnet[i]);
            item ["double_URL_encode"] = encodeURIComponent(encodeURIComponent(split_segmnet[i]));
            item ["triple_URL_encode"] = encodeURIComponent(encodeURIComponent(encodeURIComponent(split_segmnet[i])));
            item ["quadriple_URL_encode"] = encodeURIComponent(encodeURIComponent(encodeURIComponent(encodeURIComponent(split_segmnet[i]))));
            jsonarray.push(item);
        }
        console.log(JSON.stringify(jsonarray));
    }
}

$(document).on("focusout", ".fields", function (e) {
    $(this).val(($(this).val()).toUpperCase());
});
$(document).on("keyup", ".num-fields", function (e) {
    $(this).val(($(this).val()).toUpperCase());
    tryit(this, 'NUM');
});
$(document).on("focusout", ".num-fields", function (e) {
    $(this).val(($(this).val()).toUpperCase());
    tryit(this, 'NUM');
});
$(document).on("keyup", ".float-fields", function (e) {
    $(this).val(($(this).val()).toUpperCase());
    tryit(this, 'FF');
});
$(document).on("focusout", ".float-fields", function (e) {
    $(this).val(($(this).val()).toUpperCase());
    tryit(this, 'FF');
});
$(document).on("keyup", ".nc-fields", function (e) {
    //$(this).val(($(this).val()).toUpperCase());
    tryit(this, 'NC');
});
$(document).on("focusout", ".nc-fields", function (e) {
    //$(this).val(($(this).val()).toUpperCase());
    tryit(this, 'NC');
});
$(document).on("keyup", ".sc-fields", function (e) {
    $(this).val(($(this).val()).toUpperCase());
    tryit(this, 'SC');
});
$(document).on("focusout", ".sc-fields", function (e) {
    $(this).val(($(this).val()).toUpperCase());
    tryit(this, 'SC');
});

function blankCall() {

}
function removeCommas(x) {
    var temp = '';
    var temp2 = '';
    //alert(x);
    var x1 = $(x).val();
    temp = x1.replace(/\,/g, '');
    if (!isNaN(temp) && temp != null) {
        temp2 = temp;
    } else {
        temp2 = "0.0";
    }
    return temp2;
}
/*ruppes to amounts word converters starts*/
//main funtion //
function convert_amount_into_rupees_paisa(amt_field_id, amt_word_field_id) {
    var val = removeCommas(amt_field_id);
    var finalWord1 = test_value(val, amt_word_field_id);
    var finalWord2 = "";
    if (val.indexOf('.') != -1) {
        val = val.substring(val.indexOf('.') + 1, val.length);
        if (val.length == 0 || val.length == '00') {
            //finalWord2 = "zero paisa only";
            finalWord2 = "Only";
        } else {
            //finalWord2 = test_value(val, amt_word_field_id) == false ? "zero paisa only" : test_value(val, amt_word_field_id) + " paisa only";
            finalWord2 = test_value(val, amt_word_field_id) == false ? "" : " and " + test_value(val, amt_word_field_id) + " Paisa";
        }
        $(amt_word_field_id).val("Rupees " + finalWord1 + finalWord2 + " Only");
    } else {
        //$(amt_word_field_id).val(finalWord1 + " Rupees Only");
        $(amt_word_field_id).val("Rupees " + finalWord1 + " Only");
    }

}

function test_value(val, amt_word_field_id) {
    var junkVal = val;
    junkVal = Math.floor(junkVal);
    var obStr = new String(junkVal);
    numReversed = obStr.split("");
    actnumber = numReversed.reverse();
    if (Number(junkVal) >= 0) {
        //do nothing
    } else {
        $(amt_word_field_id).val('');
        return false;
    }
    if (Number(junkVal) == 0) {
        $(amt_word_field_id).val(obStr + '' + 'Rupees Zero Only');
        return false;
    }
    if (actnumber.length > 9) {
        $(amt_word_field_id).val('Oops!!!! the Number is too big to covertes');
        return false;
    }
    var iWords = ["Zero", " One", " Two", " Three", " Four", " Five", " Six", " Seven", " Eight", " Nine"];
    var ePlace = ["Ten", " Eleven", " Twelve", " Thirteen", " Fourteen", " Fifteen", " Sixteen", " Seventeen", " Eighteen", "Nineteen"];
    var tensPlace = ["dummy", " Ten", " Twenty", " Thirty", " Forty", " Fifty", " Sixty", " Seventy", " Eighty", " Ninety"];
    var iWordsLength = numReversed.length;
    var totalWords = "";
    var inWords = new Array();
    var finalWord = "";
    j = 0;
    for (i = 0; i < iWordsLength; i++) {
        switch (i) {
            case 0:
                if (actnumber[i] == 0 || actnumber[i + 1] == 1) {
                    inWords[j] = '';
                } else {
                    inWords[j] = iWords[actnumber[i]];
                }
                inWords[j] = inWords[j];
                break;
            case 1:
                tens_complication();
                break;
            case 2:
                if (actnumber[i] == 0) {
                    inWords[j] = '';
                } else if (actnumber[i - 1] != 0 && actnumber[i - 2] != 0) {
                    inWords[j] = iWords[actnumber[i]] + ' Hundred and';
                } else {
                    inWords[j] = iWords[actnumber[i]] + ' Hundred';
                }
                break;
            case 3:
                if (actnumber[i] == 0 || actnumber[i + 1] == 1) {
                    inWords[j] = '';
                } else {
                    inWords[j] = iWords[actnumber[i]];
                }
                if (actnumber[i + 1] != 0 || actnumber[i] > 0) {
                    inWords[j] = inWords[j] + " Thousand";
                }
                break;
            case 4:
                tens_complication();
                break;
            case 5:
                if (actnumber[i] == 0 || actnumber[i + 1] == 1) {
                    inWords[j] = '';
                } else {
                    inWords[j] = iWords[actnumber[i]];
                }
                inWords[j] = inWords[j] + " Lakh";
                break;
            case 6:
                tens_complication();
                break;
            case 7:
                if (actnumber[i] == 0 || actnumber[i + 1] == 1) {
                    inWords[j] = '';
                } else {
                    inWords[j] = iWords[actnumber[i]];
                }
                inWords[j] = inWords[j] + " Crore";
                break;
            case 8:
                tens_complication();
                break;
            default:
                break;
        }
        j++;
    }
    function tens_complication() {
        if (actnumber[i] == 0) {
            inWords[j] = '';
        } else if (actnumber[i] == 1) {
            inWords[j] = ePlace[actnumber[i - 1]];
        } else {
            inWords[j] = tensPlace[actnumber[i]];
        }
    }
    inWords.reverse();
    for (i = 0; i < inWords.length; i++) {
        finalWord += inWords[i];
    }
    return finalWord;
}
function myalert(title, msg, focusid) {
    var dialog = BootstrapDialog.show({
        size: BootstrapDialog.SIZE_LARGE,
        title: title,
        message: msg,
        onhidden: function () {
            // window.scrollTo(0, 0);
            // $("#empno").val("");
            //  $("#getdetailsbtn").trigger("click");
            $(focusid).focus();
        }
    });
    if (inIframe() === "true" || inIframe()) {
        dialog.getModalDialog().css({top: modal_positionY, position: "stiky"});
    }
}

function tryit(idget, field_type) {
    //alert(idget+"-"+field_type);
    if (field_type === "NUM") {
        var node = $(idget);
        node.val(node.val().replace(/[^0-9]/g, ''));
        //$(idget).autoNumeric('init');
    } else if (field_type === "NC") {//normal Characters
        var node = $(idget);
        node.val(node.val().replace(/[^a-zA-Z0-9 .,:_-]/g, ''));
    } else if (field_type === "SC") {//Speacial Characters
        var node = $(idget);
        node.val(node.val().replace(/[^a-zA-Z0-9.,-/?_@!&;'"\n ]/g, ''));
    } else if (field_type === "FF") {//Speacial Characters
        var node = $(idget);
        node.val(node.val().replace(/[^0-9.,]/g, ''));
        $(idget).autoNumeric('init');
        /*if ($.isNumeric(node.val()) || node.val() !== "") {
         
         } else {
         node.val('');
         myalert("information", "Please Entere Numeric Values", idget);
         }*/
    }
}

function buildTableFromJSON(json, table_div_id, table_id, serial_no_flag, small_font_flag, row_style, data_formatter_flag, data_formatter_name, data_event_name, column_alignment, column_hidden) {
    var table_font = "";
    if (small_font_flag === "Y") {
        table_font = "small";
    }
    if (json.length > 0) {
        $("#" + table_div_id).html("");
        var keys = Object.keys(json[0]);
        var table_top = '<table  id="' + table_id + '" data-toggle="table" data-pagination="true" data-show-refresh="false" data-show-columns="true"\n\
                                         data-show-export="true" data-cache="false" data-sort-order="asc" data-height="450"  data-search="true" data-search-align="left"\n\
                                         class="table table-responsive table-sm table-dark" data-page-list="[10,20,30,40,50,100,200,400,500,1000,2000,5000,10000]" data-filter-control="true" data-row-style="' + row_style + '">\n\
                                         <thead class="bg-info">\n\
                                         <tr>';
        var table_middle = "";
        if (serial_no_flag === "Y") {
            table_middle = table_middle + '<th data-formatter="put_slno_into_bootstraptable" data-align="center" >#</th>';
        } else if (serial_no_flag === "N") {

        } else {
            table_middle = table_middle + '<th data-field="state" data-checkbox="true" data-formatter="' + serial_no_flag + '"></th>';
        }
        for (obj in keys) {
            if (getHidden(column_hidden, keys[obj])) {
                table_middle = table_middle + '<th data-field="' + keys[obj] + '" data-sortable="true" class=" ' + table_font + '" data-align="' + getAligment(column_alignment, keys[obj]) + '" data-filter-control="text" ><span class="text-uppercase">' + keys[obj].replace(/_/g, " ") + '</span></th>';
            }
        }
        if (data_formatter_flag === "Y") {
            table_middle = table_middle + '<th  data-formatter="' + data_formatter_name + '" data-events="' + data_event_name + '" data-align="center" class="text-uppercase">Action</th>';
        }
        var table_lower = ' </tr>\n\
                                        </thead>\n\
                                       </table>';
        var combine = table_top + table_middle + table_lower;
        $("#" + table_div_id).html(combine);
        $("#" + table_id).bootstrapTable({data: json});
//        var pathname = window.location.pathname; // Returns path only
//        var url = window.location.href;     // Returns full URL
        var origin = window.location.origin;
//        alert(pathname + "--" + url + "--" + origin)
//        console.log("frame width height setted");
        if (origin.indexOf("http://10.57.4.") != -1 || origin.indexOf("http://localhost") != -1) {
            console.log("called from local machine");
        } else {
            console.log("called from live server");
            parent.setFrameWH();
        }
//        var field = "#" + table_div_id + ", " + "#" + table_id;
//        console.log(field);
//        $(field).bootstrapTable({
//            onLoadSuccess: function () {
//                // if (parent === top) {
//                console.log(" ");
//                parent.setFrameWH();
//                // }
//            },
//            error: function () {
//                // if (parent === top) {
//                console.log("Error occours");
//                parent.setFrameWH();
//                // }
//            }
//        });


    } else {
        $(table_div_id).html("");
    }
}

function buildTableFromJSONWithoutPagination(json, table_div_id, table_id, serial_no_flag, small_font_flag, row_style, data_formatter_flag, data_formatter_name, data_event_name, column_alignment, column_hidden) {
    var table_font = "";
    if (small_font_flag === "Y") {
        table_font = "small";
    }
    if (json.length > 0) {
        $("#" + table_div_id).html("");
        var keys = Object.keys(json[0]);
        var table_top = '<table  id="' + table_id + '" data-toggle="table" data-pagination="false" data-show-refresh="false" data-show-columns="true"\n\
                                         data-show-export="true" data-cache="false" data-sort-order="asc" data-height="450"  data-search="true" data-search-align="left"\n\
                                         class="table table-responsive table-sm table-dark" data-page-list="[10,20,30,40,50,100,200,400,500,1000,2000,5000,10000]" data-filter-control="true" data-row-style="' + row_style + '">\n\
                                         <thead class="bg-info">\n\
                                         <tr>';
        var table_middle = "";
        if (serial_no_flag === "Y") {
            table_middle = table_middle + '<th data-formatter="put_slno_into_bootstraptable" data-align="center" >#</th>';
        } else if (serial_no_flag === "N") {

        } else {
            table_middle = table_middle + '<th data-field="state" data-checkbox="true" data-formatter="' + serial_no_flag + '"></th>';
        }
        for (obj in keys) {
            if (getHidden(column_hidden, keys[obj])) {
                table_middle = table_middle + '<th data-field="' + keys[obj] + '" data-sortable="true" class=" ' + table_font + '" data-align="' + getAligment(column_alignment, keys[obj]) + '" data-filter-control="text" >' + keys[obj].replace(/_/g, " ") + '</th>';
            }
        }
        if (data_formatter_flag === "Y") {
            table_middle = table_middle + '<th  data-formatter="' + data_formatter_name + '" data-events="' + data_event_name + '" data-align="center" class="">Action</th>';
        }
        var table_lower = ' </tr>\n\
                                        </thead>\n\
                                       </table>';
        var combine = table_top + table_middle + table_lower;
        $("#" + table_div_id).html(combine);
        $("#" + table_id).bootstrapTable({data: json});
//        var pathname = window.location.pathname; // Returns path only
//        var url = window.location.href;     // Returns full URL
        var origin = window.location.origin;
//        alert(pathname + "--" + url + "--" + origin)
//        console.log("frame width height setted");
        if (origin.indexOf("http://10.57.4.") != -1 || origin.indexOf("http://localhost") != -1) {
            console.log("called from local machine");
        } else {
            console.log("called from live server");
            parent.setFrameWH();
        }
//        var field = "#" + table_div_id + ", " + "#" + table_id;
//        console.log(field);
//        $(field).bootstrapTable({
//            onLoadSuccess: function () {
//                // if (parent === top) {
//                console.log(" ");
//                parent.setFrameWH();
//                // }
//            },
//            error: function () {
//                // if (parent === top) {
//                console.log("Error occours");
//                parent.setFrameWH();
//                // }
//            }
//        });


    } else {
        $(table_div_id).html("");
    }
}

function buildTableFromJSONforFilterColumnList(json, table_div_id, table_id, column_alignment, column_hidden) {
    if (json.length > 0) {
        $("#" + table_div_id).html("");
        var keys = Object.keys(json[0]);
        var table_top = '<table  id="' + table_id + '" data-toggle="table" \n\
                                         data-cache="false" data-sort-order="asc" data-height="300"  \n\
                                         class="table table-responsive table-sm table-dark" >\n\
                                         <thead class="bg-info">\n\
                                         <tr>';
        var table_middle = "";
        table_middle = table_middle + '<th data-field="state" data-checkbox="true"></th>';
        for (obj in keys) {
            if (getHidden(column_hidden, keys[obj])) {
                table_middle = table_middle + '<th data-field="' + keys[obj] + '" data-sortable="true" class="text-uppercase small" data-align="' + getAligment(column_alignment, keys[obj]) + '" data-filter-control="text" >' + keys[obj].replace(/_/g, " ") + '</th>';
            }
        }
        var table_lower = ' </tr>\n\
                                        </thead>\n\
                                       </table>';
        var combine = table_top + table_middle + table_lower;
        $("#" + table_div_id).html(combine);
        $("#" + table_id).bootstrapTable({data: json});
        var origin = window.location.origin;

        if (origin.indexOf("http://10.57.4.") != -1 || origin.indexOf("http://localhost") != -1) {
            console.log("called from local machine");
        } else {
            console.log("called from live server");
            parent.setFrameWH();
        }
    } else {
        $(table_div_id).html("");
    }
}


function getAligment(column_lists_with_alignment, current_column_name) {
    //alert(column_lists_with_alignment[current_column_name]);
    var x = column_lists_with_alignment[current_column_name];
    if (x === 'left' || x === 'LEFT') {
        return "left";
    } else if (x === 'right' || x === 'RIGHT') {
        return "right";
    } else {
        return 'center';
    }
}
function getHidden(column_lists_for_hide, current_column_name) {
    var val = column_lists_for_hide[current_column_name];
    //alert(current_column_name + "--->" + val);
    if (val === 'hidden') {
        return false;
    } else {
        return true;
    }
}
function put_slno_into_bootstraptable(value, row, index) {
    var count = index;
    return (parseInt(count) + 1);
}

function blink(x) {
    $('.' + x).each(function () {
        var elem = $(this);
        setInterval(function () {
            if (elem.css('visibility') == 'hidden') {
                elem.css('visibility', 'visible');
            } else {
                elem.css('visibility', 'hidden');
            }
        }, 1000);
    });
}

function commonViewPDF(url, label) {
    $("#printViewCommonModal").remove();
    var modal_ = ' <div class="modal fade bs-example-modal-lg " id="printViewCommonModal" tabindex="-1" role="dialog" >\n\
            <div class="modal-dialog modal-lg">\n\
                <div class="modal-content" id="modal-content-my">\n\
                    <div class="modal-header">\n\
                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n\
                        <h4 class="modal-title" id="commonModalLabel"> </h4>\n\
                    </div>\n\
                    <div class="modal-body" id="commonModalBody">\n\
                    </div>\n\
                    <div class="modal-footer">\n\
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>\n\
                    </div>\n\
                </div>\n\
            </div>\n\
        </div>';
    $("body").append(modal_);
    $('#printViewCommonModal').modal('show');
    $('#printViewCommonModal').find('.modal-dialog').css({width: '1000 px', height: '500px', 'max-height': '500px'});
    $('#printViewCommonModal').find('.modal-body').css({width: '1000 px', height: '500px', 'max-height': '500px'});
    var link = '<object type="application/pdf" data="' + url + '" width="100%" height="100%"><a href="' + url + '">click here to  download the PDF file.</a></object>';
    $('#printViewCommonModal #commonModalLabel').html(label);
    $("#printViewCommonModal #commonModalBody").html(link);
//    $('#printViewCommonModal .modal-dialog').css({"width":"100%","height":"100%","margin":"0","padding":"0"});
//    $('#printViewCommonModal .modal-content').css({"min-height":"100%","height":"auto","border-radius":"0"});
}
function commonViewVideo(url, label) {
    alert("ok");
    $("#videoViewCommonModal").remove();
    var modal_ = ' <div class="modal fade bs-example-modal-lg " id="videoViewCommonModal" tabindex="-1" role="dialog" >\n\
            <div class="modal-dialog modal-lg">\n\
                <div class="modal-content" id="modal-content-my">\n\
                    <div class="modal-header">\n\
                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n\
                        <h4 class="modal-title" id="commonModalLabel"> </h4>\n\
                    </div>\n\
                    <div class="modal-body" id="commonModalBody">\n\
                    </div>\n\
                    <div class="modal-footer">\n\
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>\n\
                    </div>\n\
                </div>\n\
            </div>\n\
        </div>';
    $("body").append(modal_);
    $('#videoViewCommonModal').modal('show');
    $('#videoViewCommonModal').find('.modal-dialog').css({width: '1000 px', height: '500px', 'max-height': '500px'});
    $('#videoViewCommonModal').find('.modal-body').css({width: '1000 px', height: '500px', 'max-height': '500px'});
//    var link = '<object type="application/pdf" data="' + url + '" width="100%" height="100%"><a href="' + url + '">click here to  download the PDF file.</a></object>';
    var link = ' <video width="850" height="450" controls autoplay>\n\
                 <source src="' + url + '" type="video/mp4">\n\
                 Your browser does not support the video tag.\n\
                 </video> ';
    $('#videoViewCommonModal #commonModalLabel').html(label);
    $("#videoViewCommonModal #commonModalBody").html(link);

//    $('#videoViewCommonModal .modal-dialog').css({"width":"100%","height":"100%","margin":"0","padding":"0"});
//    $('#videoViewCommonModal .modal-content').css({"min-height":"100%","height":"auto","border-radius":"0"});
}
function commonViewTable(url, label) {
    $("#printViewCommonModal").remove();
    var modal_ = ' <div class="modal fade bs-example-modal-lg " id="tableViewCommonModal" tabindex="-1" role="dialog" >\n\
            <div class="modal-dialog modal-lg">\n\
                <div class="modal-content" id="modal-content-my">\n\
                    <div class="modal-header">\n\
                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n\
                        <h4 class="modal-title" id="commonModalLabel"> </h4>\n\
                    </div>\n\
                    <div class="modal-body" id="commonModalBody">\n\
                    </div>\n\
                    <div class="modal-footer">\n\
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>\n\
                    </div>\n\
                </div>\n\
            </div>\n\
        </div>';
    $("body").append(modal_);
    $('#tableViewCommonModal').modal('show');
    $('#tableViewCommonModal').find('.modal-dialog').css({width: '1000 px', height: '550px', 'max-height': '550px'});
    $('#tableViewCommonModal').find('.modal-body').css({width: '1000 px', height: '550px', 'max-height': '550px'});
    var link = "<div id='tableViewCommonModal_table_div'></div>"
    $('#tableViewCommonModal #commonModalLabel').html(label);
    $("#tableViewCommonModal #commonModalBody").html(link);
    var json_value = getJsonValueFromAjaxCallUnaffectingModal(url);

    var table_div_id, table_id, serial_no_flag, small_font_flag, row_style, data_formatter_flag, data_formatter_name, data_event_name, column_alignment, column_hidden;
    table_div_id = "tableViewCommonModal_table_div";
    table_id = "tableViewCommonModal_table_data";
    serial_no_flag = "N";
    small_font_flag = "Y";
    row_style = "";
    data_formatter_flag = "N";
    data_formatter_name = "";
    data_event_name = "";
    column_alignment = {};
    column_hidden = {};
    buildTableFromJSON(json_value, table_div_id, table_id, serial_no_flag, small_font_flag, row_style, data_formatter_flag, data_formatter_name, data_event_name, column_alignment, column_hidden);
}
function commonViewTableDataAllignmentAndDisplayControl(url, label, col_alignment, col_hidden) {
    $("#printViewCommonModal").remove();
    var modal_ = ' <div class="modal fade bs-example-modal-lg " id="tableViewCommonModal" tabindex="-1" role="dialog" >\n\
            <div class="modal-dialog modal-lg">\n\
                <div class="modal-content" id="modal-content-my">\n\
                    <div class="modal-header">\n\
                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n\
                        <h4 class="modal-title" id="commonModalLabel"> </h4>\n\
                    </div>\n\
                    <div class="modal-body" id="commonModalBody">\n\
                    </div>\n\
                    <div class="modal-footer">\n\
                        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>\n\
                    </div>\n\
                </div>\n\
            </div>\n\
        </div>';
    $("body").append(modal_);
    $('#tableViewCommonModal').modal('show');
    $('#tableViewCommonModal').find('.modal-dialog').css({width: '1000 px', height: '550px', 'max-height': '550px'});
    $('#tableViewCommonModal').find('.modal-body').css({width: '1000 px', height: '550px', 'max-height': '550px'});
    var link = "<div id='tableViewCommonModal_table_div'></div>"
    $('#tableViewCommonModal #commonModalLabel').html(label);
    $("#tableViewCommonModal #commonModalBody").html(link);
    var json_value = getJsonValueFromAjaxCallUnaffectingModal(url);

    var table_div_id, table_id, serial_no_flag, small_font_flag, row_style, data_formatter_flag, data_formatter_name, data_event_name, column_alignment, column_hidden;
    table_div_id = "tableViewCommonModal_table_div";
    table_id = "tableViewCommonModal_table_data";
    serial_no_flag = "N";
    small_font_flag = "Y";
    row_style = "";
    data_formatter_flag = "N";
    data_formatter_name = "";
    data_event_name = "";
    column_alignment = col_alignment;
    column_hidden = col_hidden;
    buildTableFromJSON(json_value, table_div_id, table_id, serial_no_flag, small_font_flag, row_style, data_formatter_flag, data_formatter_name, data_event_name, column_alignment, column_hidden);
}
//$('#printViewCommonModal').on('shown.bs.modal', function () {
//        $(this).find('.modal-dialog').css({width: '1000 px', height: '500px', 'max-height': '500px'});
//    });
function getCustomJsonAfterMatchingColumnData(jsonData, columnName, columnValue) {
    var temp_json = [];
    for (obj in jsonData) {
        var xx = jsonData[obj];
        var x = xx[columnName];
        if (x.trim() === columnValue.trim()) {
            temp_json.push(jsonData[obj]);
        }
    }
    return temp_json;
}
function getCustomValueOfOtherColumnForMatchingColumn(jsonData, columnNameNeedToSearch, valueNeedToMatch, columnNameWhoseValueNeedToReturn) {
    for (obj in jsonData) {
        var xx = jsonData[obj];
        var x = xx[columnNameNeedToSearch];
        if (x.trim() === valueNeedToMatch.trim()) {
            x = xx[columnNameWhoseValueNeedToReturn];
            return x;
        }
    }
    return "";
}
function getPDFHelpInModal(customMethod) {
//        alert(x);
    var modal_ = '<div class="modal fade bs-example-modal-lg" id="alertModal_general" tabindex="-1" role="dialog" >\n\
            <div class="modal-dialog modal-md">\n\
                <div class="modal-content">\n\
                    <div class="modal-body" id="alertModalBody">\n\
                        <br>\n\
                        <br>\n\
                        <div class="row">\n\
                            <div class="col-lg-6">\n\
                                <button class="btn btn-success jumbotron btn-lg btn-block" onclick="' + customMethod + '()">I want to read the help <br><br><br><i class="fa fa-smile-o" style="font-size:48px;color:green"></i></button>\n\
                            </div>\n\
                            <div class="col-lg-6">\n\
                                <button class="btn btn-danger jumbotron btn-lg btn-block" data-dismiss="modal">I do not want to read the help<br><br><br><i class="fa fa fa-frown-o" style="font-size:48px;color:red"></i></button>\n\
                            </div>\n\
                        </div>\n\
                    </div>\n\
                </div>\n\
            </div>\n\
        </div>';
    $("body").append(modal_);
    $('#alertModal_general').modal('show');
}
function displayDocList(jsonData) {
    var x = "";
    for (obj in jsonData) {
        x = x + '<div class="col-lg-12">\n\
                                <button class="btn btn-info jumbotron btn-lg btn-block text-uppercase" onclick="commonViewPDF(\'' + jsonData[obj].path + '\',\'' + jsonData[obj].desc + '\')">' + jsonData[obj].desc + '</button>\n\
                            </div>';
    }

    var modal_ = '<div class="modal fade bs-example-modal-lg " id="optionModal_general" tabindex="-1" role="dialog" >\n\
            <div class="modal-dialog modal-md">\n\
                <div class="modal-content">\n\
<div class="modal-header">\n\
                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n\
                        <h4 class="modal-title" id="optionModalLabel">List of Help Documents</h4>\n\
                    </div>\n\
                    <div class="modal-body" id="optionModalBody">\n\
                        <br>\n\
                        <br>\n\
                        <div class="row">' + x + '\n\
                        </div>\n\
                    </div>\n\
                </div>\n\
            </div>\n\
        </div>';
    $("body").append(modal_);
    $('#optionModal_general').modal('show');
}
function displayVideoList(jsonData) {
    var x = "";
    for (obj in jsonData) {
        x = x + '<div class="col-lg-12">\n\
                                <button class="btn btn-info jumbotron btn-lg btn-block text-uppercase" onclick="commonViewVideo(\'' + jsonData[obj].path + '\',\'' + jsonData[obj].desc + '\')">' + jsonData[obj].desc + '</button>\n\
                            </div>';
    }

    var modal_ = '<div class="modal fade bs-example-modal-lg " id="optionModal_general" tabindex="-1" role="dialog" >\n\
            <div class="modal-dialog modal-md">\n\
                <div class="modal-content">\n\
<div class="modal-header">\n\
                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n\
                        <h4 class="modal-title" id="optionModalLabel">List of Help Documents</h4>\n\
                    </div>\n\
                    <div class="modal-body" id="optionModalBody">\n\
                        <br>\n\
                        <br>\n\
                        <div class="row">' + x + '\n\
                        </div>\n\
                    </div>\n\
                </div>\n\
            </div>\n\
        </div>';
    $("body").append(modal_);
    $('#optionModal_general').modal('show');
}

function GeneralBootstrapTableFilter(table_id, filter_btn_placed_id, recurring) {
    if (recurring !== "1") {
        var param = "1";
        var filter_btn_html = '<button class="btn btn-success btn-block" onclick="GeneralBootstrapTableFilter(\'' + table_id + '\',\'' + filter_btn_placed_id + '\',\'' + param + '\')"><i class="glyphicon glyphicon-filter"></i>&nbsp;&nbspFilter Data</button>';
        $(filter_btn_placed_id).html(filter_btn_html);
    } else {
        //getting the table data
        var table_json = $(table_id).bootstrapTable('getData');
        if (table_json.length > 0) {
            //build the list of columns
            var jsonObj = table_json[0];
            var keys = Object.keys(jsonObj);
            var keys_table = [];
            for (obj in keys) {
                //build the json for showing into the table
                var obj_keys = {"filter_column_name": keys[obj]};
                keys_table.push(obj_keys);
            }
            //display the table for choosing the filters
            var filter_choice_table_id = "GeneralBootstrapTableFilter_filter_choosing_div_temp_001_table";
            var filter_choice_table_id_temp = "#GeneralBootstrapTableFilter_filter_choosing_div_temp_001_table";
            var filter_choosing_div_temp = '<div id="GeneralBootstrapTableFilter_filter_choosing_div_temp_001" class="small"></div>\n\
                                            <div class="form-group col-lg-12 col-md-12 col-xs-12 col-sm-12">\n\
                                            <button class="btn btn-success btn-block" onclick="prepareFilterAndViewDatas(\'' + table_id + '\',\'' + filter_choice_table_id_temp + '\')"><i></i>&nbsp;&nbspCreate Filter</button>\n\
                                            </div>';
            myalert("Choose The Filter Column", filter_choosing_div_temp);
            setTimeout(function () {
                buildTableFromJSONforFilterColumnList(keys_table, "GeneralBootstrapTableFilter_filter_choosing_div_temp_001", filter_choice_table_id, [], []);
            }, 500);
        } else {
            console.log("no table data found");
            myalert("Information", "Filter can not be initiated: Due to no data found in the table Or Table does not exists");
        }

    }

}
function prepareFilterAndViewDatas(data_table, filter_table) {


    var final_filtered_table = filter_table + "_second_stape_002";
    var data = $(data_table).bootstrapTable('getData');
    var filter_head = $(filter_table).bootstrapTable('getSelections');
    var html_tags = "<div class='row' id='FilterItemsDiv001'>";
    //getting hte corresponding values...
    for (var obj in filter_head) {
        var raw_data_length = data.length;
        var filter_col_name = filter_head[obj].filter_column_name;
        var returned_json_array = crawalDataToBuildInputType(data, filter_col_name);
        var return_filter_data_length = returned_json_array.length;

        var input_filter_type = "";
        if (parseInt(return_filter_data_length) === 1 && returned_json_array[0] === "NUMERIC-VALUE-FOUND-FOR-TABLE-DATA") {
            input_filter_type = "TEXT-BOX-NUMERIC-SEARCH";
        } else if (parseFloat(return_filter_data_length) / parseFloat(raw_data_length) > .5 || parseFloat(return_filter_data_length) > 200) {
            input_filter_type = "TEXT-BOX";
        } else {
            input_filter_type = "DROPDOWN";
        }
        html_tags = html_tags + buildTagsForHTML(input_filter_type, returned_json_array, filter_col_name);
    }
    html_tags = html_tags + "<div  class='form-group col-lg-3 col-md-4 col-sm-6 col-xs-12'><label for='getFilterDataBtn001'>&nbsp;</label>\n\
                                <button type='text' selected_filter_table='" + filter_table + "' selected_data_table='" + data_table + "' filtered_data_table='" + final_filtered_table + "' \n\
                                   id='getFilterDataBtn001' class='btn btn-success btn-block' ><i></i>\n\
                                   &nbsp;&nbsp; Click To Get The Filtered Data \n\
                                </button>\n\
                             </div>";
    html_tags = html_tags + "</div><div class='col-lg-12 col-md-12 col-sm-12 col-xs-12  hidden' id='FilterDataDiv001'><div id='" + final_filtered_table.replace("#", "") + "'></div></div>";

    commonModalViewOnDemand("commonFilterImplementation", "Choose Options From Selected Filter and Get Data <button type='text'  id='showFilterDataBtn001' class='btn btn-warning hidden' ><i></i>&nbsp;&nbsp; Click To Show The Filter </button>", html_tags, 'auto');
    $(".selectpicker").selectpicker("refresh");
}
$(document).on('click', '#getFilterDataBtn001', function () {
    $("#showFilterDataBtn001").removeClass("hidden");
    $("#FilterItemsDiv001").addClass('hidden');
    $("#FilterDataDiv001").removeClass('hidden');
    var filtered_data_table_id = $(this).attr("filtered_data_table");
    var data_table_id = $(this).attr("selected_data_table");
    var filter_table_id = $(this).attr("selected_filter_table");
    var data_table = $(data_table_id).bootstrapTable('getData');
    var filter_head = $(filter_table_id).bootstrapTable('getSelections');
    for (var obj in filter_head) {
        var filter_col_name = filter_head[obj].filter_column_name;
        var filter_col_value = $("#001_search_" + filter_col_name).val();
        var filter_col_type = $("#001_search_" + filter_col_name).attr("column_type");
        console.log(filter_head[obj].filter_column_name + "---" + filter_col_type);
        if (filter_col_value && filter_col_type) {
            data_table = filterDataTable(data_table, filter_col_name, filter_col_value, filter_col_type);
            console.log("data length:-" + data_table.length + "... data table data:-" + data_table);
        }
    }
    //load table to the appropriate location
    if (data_table.length > 0) {
        buildTableFromJSON(data_table, filtered_data_table_id.replace("#", ""), filtered_data_table_id.replace("#", "") + "_table", "Y", "Y", "", "N", "", "", [], []);
    } else {
        $(filtered_data_table_id).html("No Data Found");
    }
});

function filterDataTable(data, col_name, col_value, col_type) {
    var data_ = [];
    for (var obj in data) {
        var table_data_column_value = data[obj][col_name];
        table_data_column_value = table_data_column_value.toUpperCase();
        col_value = col_value.toString().toUpperCase();
        if (col_type === "DROPDOWN") {
            if (col_value.includes(",")) {
                var x = col_value.split(",");
                if (x.includes(table_data_column_value)) {
                    data_.push(data[obj]);
                }
//                var x = col_value.split(",");
//                for (obj in x) {
//                    if (x[obj] === table_data_column_value) {
//                        data_.push(data[obj]);
//                    }
//                }
            } else {
                if (col_value === table_data_column_value) {
                    data_.push(data[obj]);
                }
            }
            console.log(data_.toString());
        } else if (col_type === "TEXT-BOX" && table_data_column_value.includes(col_value) && col_value !== "") {
            data_.push(data[obj]);
        } else if (col_type === "TEXT-BOX-NUMERIC-SEARCH" && col_value !== "") {
            var amount = "";
            if (col_value.includes("<")) {
                amount = col_value.split("<")[1];
                if (!isNaN(amount)) {
                    if (parseFloat(table_data_column_value) < parseFloat(amount)) {
                        data_.push(data[obj]);
                    }
                }
            } else if (col_value.includes(">")) {
                amount = col_value.split(">")[1];
                if (!isNaN(amount)) {
                    if (parseFloat(table_data_column_value) > parseFloat(amount)) {
                        data_.push(data[obj]);
                    }
                }
            } else if (col_value.includes("=")) {
                amount = col_value.split("=")[1];
                if (!isNaN(amount)) {
                    if (parseFloat(table_data_column_value) === parseFloat(amount)) {
                        data_.push(data[obj]);
                    }
                }
            } else {
                amount = col_value;
                if (amount.includes(table_data_column_value)) {
                    data_.push(data[obj]);
                }
            }
        } else {
            console.log("Unmatched Data Found:Column Name:-" + col_name + ", Column Type:-" + col_type + ", Column Value:-" + col_value + ", Table Data Column Value:-" + table_data_column_value);
        }
    }
    return data_;
}


$(document).on('click', '#showFilterDataBtn001', function () {
    $(this).addClass('hidden');
    $("#FilterItemsDiv001").removeClass('hidden');
    $("#FilterDataDiv001").addClass('hidden');
});

function buildTagsForHTML(input_filter_type, json_array, filter_col_name) {
    var html_input = "";
    if (input_filter_type === "TEXT-BOX") {
        html_input = '<div class="form-group col-lg-3 col-md-4 col-sm-6 col-xs-12"><label for="001_search_' + filter_col_name + '">' + filter_col_name.replace(/_/g, " ") + '</label><input column_type="TEXT-BOX" id="001_search_' + filter_col_name + '" type="text" placeholder="Search for a matching value" class="form-control"/></div>';
    } else if (input_filter_type === "TEXT-BOX-NUMERIC-SEARCH") {
        html_input = '<div class="form-group col-lg-3 col-md-4 col-sm-6 col-xs-12"><label for="001_search_' + filter_col_name + '">' + filter_col_name.replace(/_/g, " ") + '</label><input column_type="TEXT-BOX-NUMERIC-SEARCH" id="001_search_' + filter_col_name + '" type="text" placeholder="use (e.g.): >500 OR <500 OR =500 for better filter" class="form-control"/></div>';
    } else if (input_filter_type === "DROPDOWN") {
        var option = "";
        for (var obj in json_array) {
            option = option + '<option value="' + json_array[obj] + '">' + json_array[obj] + '</option>';
        }
        html_input = '<div class="form-group col-lg-3 col-md-4 col-sm-6 col-xs-12"><label for="001_search_' + filter_col_name + '">' + filter_col_name.replace(/_/g, " ") + '</label>\n\
        <select column_type="DROPDOWN" class="selectpicker form-control" multiple data-size="5" data-live-search="true" id="001_search_' + filter_col_name + '">' + option + '</select>\n\
        </div>';
    }
    return html_input;

}

function crawalDataToBuildInputType(data, column) {//cost_centre_name
    var x = [];
    var numeric_count = 0;
    var single_non_numeric_in_numeric_column = false;
    for (var obj in data) {
        var column_data = data[obj][column];
        column_data = column_data.toString().toUpperCase();
        if (isNaN(column_data) || column_data.includes("+")) {
//            document.write(num1 + " is not a number <br/>");
            single_non_numeric_in_numeric_column = true;
            numeric_count = 0;
        } else if (!single_non_numeric_in_numeric_column) {
            numeric_count++;
//            document.write(num1 + " is a number <br/>");
        }
        x.push(column_data);
    }
    var unique = [];
    if (numeric_count <= 0) {
        unique = x.filter(function (itm, i, x) {
            return i === x.indexOf(itm);
        });
    } else {
        unique = ["NUMERIC-VALUE-FOUND-FOR-TABLE-DATA"];
    }
    return unique;

}

function commonModalViewOnDemand(id, label, content, width) {
    var id_ = "commonModalView" + id;
    $("#" + id_).remove();
    var modal_ = '<div class="modal fade" id="' + id_ + '" tabindex="-1" role="dialog" >\n\
            <div class="modal-dialog">\n\
                <div class="modal-content">\n\
                    <div class="modal-header">\n\
                        <button type="button" class="close" data-dismiss="modal">&times;</button>\n\
                        <h4 class="modal-title" id="' + id_ + 'Label">' + label + '</h4>\n\
                    </div>\n\
                    <div class="modal-body" id="' + id_ + 'Body">' + content + '</div>\n\
                    <div class="modal-footer"><button type="button" class="btn btn-danger" data-dismiss="modal">Close</button></div>\n\
                </div>\n\
            </div>\n\
        </div>';
    $("body").append(modal_);
    $('#' + id_).modal('show');
    $('#' + id_).find('.modal-dialog').css({width: width, height: '550px', 'max-height': '550px'});
    $('#' + id_).find('.modal-body').css({width: width, height: '550px', 'max-height': '550px'});
}

function MyPopOver(id, data_placement, title, data_trigger, data_content) {
    //alert("ok"+id)
    //data-placement='top' title='INFORMATION--wor' data-trigger='hover' data-content='Worked'
    $(id).attr("data-placement", data_placement);
    $(id).attr("title", title);
    $(id).attr("data-trigger", data_trigger);
    $(id).attr("data-content", data_content);
    $(id).popover({
        html: true,
        content: function () {
            return $('#popover-content').html();
        }
    });
}

function getSingleValueFromAjaxCallProgressBar(target_url) {
    var value = "";
    var x = $.ajax({
        type: "post",
        url: target_url,
        async: false,
        success: function (json) {
            //$(".modal").modal('hide');
            //$("#overlay").remove();
            if (jQuery.isEmptyObject(json.data)) {
                value = json;
            } else {
                value = json.data;

            }
        },
        error: function (xhr, status, error) {
            //$(".modal").modal('hide');
            //$("#overlay").remove();
            if (status === "error") {
                myalert("UNWANTED ERROR!", "Error Message:" + error);
            }
        }
    });
    return value;
}
function toggleEnableDisable(id) {
    var ro = $(id).prop('readonly');
    $(id).prop('readonly', !ro).focus();
}

function toggleEnableDisableWithValues(id, value) {
    var ro = $(id).prop('readonly');
    $(id).val(value);
    $(id).prop('readonly', !ro).focus();
    if (ro) {
        $(id).val('');
    }
}

function showMenu(id) {
    $("#" + id).show();
}
function hideMenu(id) {
    $("#" + id).hide();
}